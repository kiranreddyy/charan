{
  "variables": {
    "winrm_password": "",
    "StorageAccountKey": "",
    "runId": "",
    "communicator": "",
    "winrm_username": "",
    "winrm_use_ssl": "",
    "winrm_insecure": "",
    "winrm_timeout": "",
    "resource_group_name": "",
    "VirtualNetwork": "",
    "Subnet": "",
    "VirtualNetworkRG": "",
    "os_type": "",
    "vm_name": "",
    "vm_size": "",
    "publisher": "",
    "offer": "",
    "sku": "",
    "image_gallery_name": "",
    "image_version": "",
    "storage_resource_group": "",
    "storageAccountName": "",
    "container_name": "",
    "tmpFolderPath": "",
    "toolsFolderPath": "",    
    "regdestination": "",
    "regstup": ""
  },

  "builders": [
    {
      "type": "azure-arm",
      "tenant_id": "{{user `AZURE_TENANT_ID`}}",
      "subscription_id": "{{user `AZURE_SUBSCRIPTION_ID`}}",
      "client_id": "{{user `AZURE_CLIENT_ID`}}",
      "winrm_password": "{{user `winrm_password`}}",
      "communicator": "{{user `communicator`}}",
      "winrm_username": "{{user `winrm_username`}}",
      "winrm_use_ssl": "{{ user `winrm_use_ssl`}}",
      "winrm_insecure": "{{ user `winrm_insecure`}}",
      "winrm_timeout": "{{ user `winrm_timeout`}}",
      "build_resource_group_name": "{{user `resource_group_name`}}",
      "managed_image_resource_group_name": "{{user `resource_group_name`}}",
      "virtual_network_name": "{{user `Virtual_Network`}}",
      "virtual_network_subnet_name": "{{user `Subnet`}}",
      "virtual_network_resource_group_name": "{{user `Virtual_NetworkRG`}}",
      "os_type": "{{user `os_type`}}",
      "managed_image_name": "{{user `vm_name`}}",
      "vm_size": "{{user `vm_size`}}",
      "image_publisher": "{{ user `publisher`}}",
      "image_offer": "{{ user `offer`}}",
      "image_sku": "{{ user `sku`}}",
      "image_version": "{{ user `image_version`}}",
      
    
      "azure_tags": {
        "bu": "sbo",
        "environment": "dev",
        "product": "ei",
        "runId": "{{user `runId`}}"
      }
    }
  ],
  "provisioners": [
    {
      "type": "powershell",
      "inline": [
        "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\.NetFramework\\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord",
        "Install-PackageProvider -Name Nuget -MinimumVersion 2.8.5.201 -Force",
        "Install-Module -Name PowerShellGet -Force",
        "Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted",
        "Install-Module -Name Az -Force",
        "Install-Module -Name 7Zip4Powershell -RequiredVersion 2.4.0 -Force"
       ]
    },
      {
      "type": "file",
      "source": "Common/Download_AzBlobWorkloadSoftwares.ps1",
      "destination": "/tmp/Download_AzBlobWorkloadSoftwares.ps1",
      "direction": "upload"
    },
     {
      "type": "file",
      "source": "Licensing/Packer/ValidationConfig.json",
      "destination": "/tmp/ValidationConfig.json",
      "direction": "upload"
    },
      {
      "type": "file",
      "source": "Licensing/PowershellScripts/Apply_SoftwareProvision.ps1",
      "destination": "/tmp/Apply_SoftwareProvision.ps1",
      "direction": "upload"
    },
    {
      "type": "file",
      "source": "Licensing/PowershellScripts/Apply_SwInstall.ps1",
      "destination": "/tmp/Apply_SwInstall.ps1",
      "direction": "upload"
    },
     {
      "type": "file",
      "source": "Licensing/PowershellScripts/Apply_RegEdit.ps1",
      "destination": "{{user `regdestination`}}",
      "direction": "upload"
    },
    {
      "type": "file",
       "source": "Licensing/PowershellScripts/Execute_Regedit.cmd",
      "destination": "{{user `regstup`}}",
      "direction": "upload"
    },
    {
      "type": "file",
      "source": "Licensing/PowershellScripts/Execute_FunctionalValidation.ps1",
      "destination": "/tmp/Execute_FunctionalValidation.ps1",
      "direction": "upload"
    },
    {
      "type": "powershell",
      "environment_vars": [
        "storageAccountName = {{user `storageAccountName`}}",
        "container_name = {{user `container_name`}}",
        "resourceGroup = {{user `resourceGroup`}}",
        "StorageAccountKey = {{user `StorageAccountKey`}}"
      ],
      "inline": [
        "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "/tmp/Download_AzBlobWorkloadSoftwares.ps1"
      ]
    },
      {
      "type": "powershell",
        "environment_vars": [
          "tmpFolderPath = {{user `tmpFolderPath`}}",
          "toolsFolderPath = {{user `toolsFolderPath`}}"
      ],
      "inline": [
        "/tmp/Apply_SoftwareProvision.ps1"
      ]
    }, 
         {
      "type": "powershell",
            "environment_vars":
      [
          "toolsFolderPath = {{user `toolsFolderPath`}}"
      ],
      "inline": [
        "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "/tmp/Apply_SwInstall.ps1"
      ]
    },
    {
      "type": "powershell",
      "environment_vars": [
        "storageAccountName = {{user `storageAccountName`}}",
	      "runId = {{user `runId`}}",
	      "StorageAccountKey = {{user `StorageAccountKey`}}",
	      "containerValidationlogs = {{user `containerValidationlogs`}}",
	      "tmpFolderPath = {{user `tmpFolderPath`}}"
      ],
      "inline": [
	"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12",
        "/tmp/Execute_FunctionalValidation.ps1"
      ]
    }, 
    {
      "type": "powershell",
      "inline": [
        "Remove-Item 'C:/tmp' -Force -Recurse -ErrorAction SilentlyContinue",
        "while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }",
        "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
        "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
      ]
    }
  ]
}
